// < --------------------------------------------- MongoDB --------------------------------------------- >
// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// model Account {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId            String  @db.ObjectId
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.String
//   access_token      String? @db.String
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.String
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String   @unique
//   userId       String   @db.ObjectId
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//   id            String    @id @default(auto()) @map("_id") @db.ObjectId
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?

//   username String? @unique

//   image    String?
//   accounts Account[]
//   sessions Session[]
// }

// < --------------------------------------------- MySQL --------------------------------------------- >

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model InstructorAccount {
  id        String   @id @default(cuid())
  userId    String
  expertise String?
  title     String?
  workdays  String
  createdAt DateTime
  updatedAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentAccount {
  id        String   @id @default(cuid())
  userId    String
  major     String
  createdAt DateTime
  updatedAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminAccount {
  id        String    @id @default(cuid())
  userId    String
  role      AdminType @default(ADMINISTRATOR)
  createdAt DateTime
  updatedAt DateTime

  createdSchools School[] @relation("CreatedBy")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model School {
  id          String   @id @default(cuid())
  name        String
  location    String?
  description String?
  createdAt   DateTime
  updatedAt   DateTime

  creatorId String?
  creator   AdminAccount? @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
}

model DevAccount {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime
  updatedAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  username String? @unique
  bio      String?

  image             String?
  accounts          Account[]
  sessions          Session[]
  urls              UserURLs[]
  roles             UserRoles[]
  InstructorAccount InstructorAccount[]
  StudentAccount    StudentAccount[]
  AdminAccount      AdminAccount[]
  DevAccount        DevAccount[]
}

model UserURLs {
  id     String @id @default(cuid())
  url    String
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserRoles {
  id     String   @id @default(cuid())
  role   UserType @default(STUDENT)
  userId String

  User User? @relation(fields: [userId], references: [id])
}

enum UserType {
  DEVELOPER
  ADMINISTRATOR
  SCHEDULER
  INSTRUCTOR
  STUDENT
}

enum AdminType {
  ADMINISTRATOR
  SCHEDULER
}
