// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model AccountAdmin {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime
  updatedAt DateTime

  createdSchools School[] @relation("CreatedBy")

  User  User    @relation(fields: [userId], references: [id])
  Class Class[]
}

model AccountDev {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime
  updatedAt DateTime

  User User @relation(fields: [userId], references: [id])
}

model AccountInstructor {
  id        String   @id @default(cuid())
  userId    String
  schooId   String
  expertise String?
  title     String?
  createdAt DateTime
  updatedAt DateTime
  workdays  String

  School School @relation(fields: [schooId], references: [id])
  User   User   @relation(fields: [userId], references: [id])

  subject Subject[]
}

model AccountScheduler {
  id        String   @id @default(cuid())
  userId    String
  schoolId  String
  createdAt DateTime
  updatedAt DateTime

  School        School          @relation(fields: [schoolId], references: [id])
  User          User            @relation(fields: [userId], references: [id])
  ClassSchedule ClassSchedule[]
}

model AccountStudent {
  id        String   @id @default(cuid())
  userId    String
  schoolId  String
  major     String
  createdAt DateTime
  updatedAt DateTime

  School School @relation(fields: [schoolId], references: [id])
  User   User   @relation(fields: [userId], references: [id])
}

model Building {
  id        String   @id @default(cuid())
  schoolId  String
  name      String
  location  String?
  createdAt DateTime
  updatedAt DateTime

  School School @relation(fields: [schoolId], references: [id])
  Room   Room[]
}

model Class {
  id          String   @id @default(cuid())
  name        String
  description String
  capacity    Int
  creatorId   String
  createdAt   DateTime
  updatedAt   DateTime

  AccountAdmin AccountAdmin? @relation(fields: [creatorId], references: [id])
  subject      Subject[]
}

model ClassSchedule {
  id        String   @id @default(cuid())
  subjectId String
  roomId    String
  day       Day
  startTime DateTime @db.Time()
  endTime   DateTime @db.Time()
  creatorId String
  createdAt DateTime
  updatedAt DateTime

  subject          Subject?         @relation(fields: [subjectId], references: [id])
  room             Room?            @relation(fields: [roomId], references: [id])
  accountScheduler AccountScheduler @relation(fields: [creatorId], references: [id])
}

model Room {
  id           String   @id @default(cuid())
  buildingId   String
  name         String
  capacity     Int
  type         RoomType
  createdAt    DateTime
  updatedAt    DateTime
  availability Json     @default("[]") // add default JSON here

  Building      Building        @relation(fields: [buildingId], references: [id])
  ClassSchedule ClassSchedule[]
}

model School {
  id          String   @id @default(cuid())
  name        String
  location    String?
  description String?
  createdAt   DateTime
  updatedAt   DateTime
  creatorId   String?

  Creator           AccountAdmin?       @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  AccountStudent    AccountStudent[]
  AccountScheduler  AccountScheduler[]
  Building          Building[]
  AccountInstructor AccountInstructor[]
}

model Subject {
  id             String  @id @default(cuid())
  classId        String?
  instructorId   String?
  code           String
  description    String
  lecUnit        Int
  labUnit        Int
  contactHours   Float
  remainingHours Float

  AccountInstructor AccountInstructor? @relation(fields: [instructorId], references: [id])
  Class             Class?             @relation(fields: [classId], references: [id])
  ClassSchedule     ClassSchedule[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  bio           String?
  urls          Json?
  roles         Json?
  dateJoined    DateTime  @default(now())

  accounts          Account[]
  sessions          Session[]
  AccountInstructor AccountInstructor[]
  AccountStudent    AccountStudent[]
  AccountAdmin      AccountAdmin[]
  AccountDev        AccountDev[]
  AccountScheduler  AccountScheduler[]
}

enum RoomType {
  LECTURE
  LABORATORY
}

enum UserType {
  DEVELOPER
  ADMINISTRATOR
  SCHEDULER
  INSTRUCTOR
  STUDENT
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
