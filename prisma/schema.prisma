// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  User User @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  User User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model AccountAdmin {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime
  updatedAt DateTime

  createdSchools School[] @relation("CreatedBy")

  User User @relation(fields: [userId], references: [id])
}

model AccountDev {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime
  updatedAt DateTime

  User User @relation(fields: [userId], references: [id])
}

model AccountInstructor {
  id         String   @id @default(cuid())
  userId     String
  expertise  String?
  title      String?
  createdAt  DateTime
  updatedAt  DateTime
  workdays   String
  teachingAt School[]

  User User @relation(fields: [userId], references: [id])
}

model AccountScheduler {
  id        String   @id @default(cuid())
  userId    String
  schoolId  String
  createdAt DateTime
  updatedAt DateTime

  School School @relation(fields: [schoolId], references: [id])
  User   User   @relation(fields: [userId], references: [id])
}

model AccountStudent {
  id        String   @id @default(cuid())
  userId    String
  schoolId  String
  major     String
  createdAt DateTime
  updatedAt DateTime

  School School @relation(fields: [schoolId], references: [id])
  User   User   @relation(fields: [userId], references: [id])
}

model Building {
  id        String   @id @default(cuid())
  schoolId  String
  name      String
  location  String?
  createdAt DateTime
  updatedAt DateTime

  School School @relation(fields: [schoolId], references: [id])
  Room   Room[]
}

model Room {
  id           String   @id @default(cuid())
  buildingId   String
  name         String
  capacity     Int
  type         RoomType
  createdAt    DateTime
  updatedAt    DateTime
  availability Json // add default JSON here

  Building Building @relation(fields: [buildingId], references: [id])
}

model School {
  id                  String   @id @default(cuid())
  name                String
  location            String?
  description         String?
  createdAt           DateTime
  updatedAt           DateTime
  creatorId           String?
  accountInstructorId String?

  Creator           AccountAdmin?      @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  AccountInstructor AccountInstructor? @relation(fields: [accountInstructorId], references: [id])

  AccountStudent   AccountStudent[]
  AccountScheduler AccountScheduler[]
  Building         Building[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique
  bio           String?
  image         String?

  accounts          Account[]
  sessions          Session[]
  urls              UserURLs[]
  roles             UserRoles[]
  AccountInstructor AccountInstructor[]
  AccountStudent    AccountStudent[]
  AccountAdmin      AccountAdmin[]
  AccountDev        AccountDev[]
  AccountScheduler  AccountScheduler[]
}

model UserURLs {
  url    String
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([url, userId])
}

model UserRoles {
  role   UserType @default(STUDENT)
  userId String

  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([role, userId])
}

enum RoomType {
  LECTURE
  LABORATORY
}

enum UserType {
  DEVELOPER
  ADMINISTRATOR
  SCHEDULER
  INSTRUCTOR
  STUDENT
}
